// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String             @id @default(cuid())
  name            String?
  email           String?            @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  playerRatings   TournamentRating[]
  matchPlayers    MatchPlayer[]
  ratingHistories RatingHistory[]
  matchResult     MatchResult[]
  tournaments     Tournament[]       @relation("TournamentUsers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TournamentRating {
  id           String     @id @default(uuid())
  player       User       @relation(fields: [playerId], references: [id])
  playerId     String
  rating       Float      @default(1000)
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
}

model Tournament {
  id                String             @id @default(uuid())
  tournamentName    String
  created           DateTime           @default(now())
  password          String             @db.VarChar(255)
  players           User[]             @relation("TournamentUsers")
  matches           Match[]
  tournamentRatings TournamentRating[]
}

model Match {
  id              String          @id @default(uuid())
  tournament      Tournament?     @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  matchDateTime   DateTime        @default(now())
  matchPlayers    MatchPlayer[]
  ratingHistories RatingHistory[]
  matchResults    MatchResult[]
}

model MatchPlayer {
  id       String @id @default(uuid())
  match    Match  @relation(fields: [matchId], references: [id])
  matchId  String
  player   User   @relation(fields: [playerId], references: [id])
  playerId String
}

model MatchResult {
  id            String       @id @default(uuid())
  match         Match        @relation(fields: [matchId], references: [id])
  matchId       String
  player        User         @relation(fields: [playerId], references: [id])
  playerId      String
  position      Int
  corporation   Corporation? @relation(fields: [corporationId], references: [id])
  corporationId String
}

model RatingHistory {
  id       String @id @default(uuid())
  player   User   @relation(fields: [playerId], references: [id])
  playerId String
  match    Match  @relation(fields: [matchId], references: [id])
  matchId  String
  rating   Float
}

model Corporation {
  id           String        @id @default(uuid())
  name         String
  wins         Int           @default(0)
  matchResults MatchResult[]
}
